"use strict";(self.webpackChunkmare_ai=self.webpackChunkmare_ai||[]).push([[383],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>u});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=n.createContext({}),p=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=p(r),u=a,g=c["".concat(d,".").concat(u)]||c[u]||m[u]||o;return r?n.createElement(g,l(l({ref:t},s),{},{components:r})):n.createElement(g,l({ref:t},s))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=c;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},2974:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={description:"Model Registry",sidebar_label:"Registry",slug:"/models/model-registry"},l="Model Registry",i={unversionedId:"models/model-registry",id:"models/model-registry",title:"Model Registry",description:"Model Registry",source:"@site/docs/models/model-registry.md",sourceDirName:"models",slug:"/models/model-registry",permalink:"/docs/models/model-registry",draft:!1,editUrl:"https://github.com/gregbugaj/marie-ai/tree/develop/docs/docs/models/model-registry.md",tags:[],version:"current",frontMatter:{description:"Model Registry",sidebar_label:"Registry",slug:"/models/model-registry"},sidebar:"tutorialSidebar",previous:{title:"Named entity recognition",permalink:"/docs/models/named-entity-recognition"},next:{title:"Introduction",permalink:"/docs/category/models"}},d={},p=[{value:"Providers",id:"providers",level:2},{value:"Adding provider",id:"adding-provider",level:3},{value:"Examples",id:"examples",level:2}],s={toc:p};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"model-registry"},"Model Registry"),(0,a.kt)("p",null,"Model registry provides a unified way to search and retrieve models from number of sources."),(0,a.kt)("p",null,"Each model is downloaded to local cache and used from there, check is performed on the model to make sure that it has\nnot been updated since last download time."),(0,a.kt)("h2",{id:"providers"},"Providers"),(0,a.kt)("p",null,"There are number of different providers that can be used out of the box."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Protocol"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"zoo"),(0,a.kt)("td",{parentName:"tr",align:null},"Local model zoo(native file access)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"git"),(0,a.kt)("td",{parentName:"tr",align:null},"Git")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"S3"),(0,a.kt)("td",{parentName:"tr",align:null},"Amazon S3")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"gdrive"),(0,a.kt)("td",{parentName:"tr",align:null},"Google Drive")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"dvc"),(0,a.kt)("td",{parentName:"tr",align:null},"Data Version Control")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"mflow"),(0,a.kt)("td",{parentName:"tr",align:null},"Mflow support")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"transformers"),(0,a.kt)("td",{parentName:"tr",align:null},"Transformers model")))),(0,a.kt)("h3",{id:"adding-provider"},"Adding provider"),(0,a.kt)("p",null,"Adding a new provider requires that we implement a ",(0,a.kt)("inlineCode",{parentName:"p"},"ModelRegistryHandler"),".",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"ModelRegistryHandler")," is a base class that defines common functionality for a URI protocol.\nIt routes I/O for a generic URI which may look like ",(0,a.kt)("inlineCode",{parentName:"p"},"protocol://*")," or a canonical filepath ",(0,a.kt)("inlineCode",{parentName:"p"},"/foo/bar/baz.")),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Get model by name or path"),"\nThis is a basic usage of how to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"ModelRegistry")," all registered providers will be searched in order to find the\nmodel."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'_name_or_path = "group/layoutlmv3-large-indexer-ner"\n_name_or_path = ModelRegistry.get_local_path(_name_or_path)\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Customize model search directory")),(0,a.kt)("p",null,"We can customize model search directory by adding ",(0,a.kt)("inlineCode",{parentName:"p"},"__model_path__")," to our ",(0,a.kt)("inlineCode",{parentName:"p"},"**kwargs")," and passing them to the function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'__model_path__ = os.path.join(\n    os.path.abspath(os.path.join(__root_dir__, "..")), "model_zoo"\n)\n_name_or_path = "group/layoutlmv3-large-indexer-ner"\nkwargs = {"__model_path__": __model_path__}\n_name_or_path = ModelRegistry.get_local_path(_name_or_path, **kwargs)\n')))}m.isMDXComponent=!0}}]);